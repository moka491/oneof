[
  [every 
    [Monday]
  ] 
  [to run 
    ["say hello"]
  ]
]


[
  [every 
    [day]
  ] 
  [to run 
    ["say hello"]
  ] 
  [mentioning 
    [me, @User1 and @User2]
  ]
]

every 3 minutes mentioning me to run "say time to ping you"

me and @User1 to "watch anime now!" every day at 20:00

OneOf([every/each])
_
OneOf([
  OneOf([Monday/Tuesday/Wednesday/Thursday/Friday/Saturday/Sunday]),

  OneOf([second/minute/hour/day/month/year])
  Optional(
    _at_
    OneOf([
      Greedy([<number:1-60> seconds, <number:1-60> minutes, <number:0-23> hours]),
      <number> Optional(:<number>) Optional(OneOf(am/pm))
    ])
  )
  
  <number>_
  OneOf([seconds/minutes/hours/days/weeks/months/years])
  Optional(
    _at_
    OneOf([
      Greedy([<number>_seconds_, <number>_minutes, <number>_hours_]),
      <number> Optional(:<number>) Optional(OneOf(am/pm))
    ])
  )
])



interface Expression:
  assert(): Document[] | null

Number extends Expression:
  constructor(min, max, length)
  assert true if current cursor has a number between min and max or with the specified length

Word extends Expression:
  constructor(text)
  assert true if can find text at current position

OneOf extends Expression:
  constructor([expressions])
  assert true if one of the expressions is true, and seek back after every try

Greedy extends Expression:
  constructor([expressions])
  go through each expression until one asserts to true, rolling back on fail.
  once one is true, try to find more from the list. stop once none can be found anymore
  assert true if at least one is found, false if not

Optional extends Expression:
  constructor(expression)
  assert true if expression is true (and add to document), but assert true otherwise too.


// const tree = OneOf([Word('Every'), Word('Each')])
// _
// OneOf([
//   OneOf([Monday/Tuesday/Wednesday/Thursday/Friday/Saturday/Sunday]),

//   Sequence([
//     OneOf([second/minute/hour/day/month/year]),
//     Optional(Sequence[
//       _at_,
//       OneOf([
//         Greedy([<number:1-60> seconds, <number:1-60> minutes, <number:0-23> hours]),
//         <number> Optional(:<number>) Optional(OneOf(am/pm))
//       ])
//     ])
//   ])

//   Sequence([
//     <number>_,
//     OneOf([seconds/minutes/hours/days/weeks/months/years]),
//     Optional(
//       _at_,
//       OneOf([
//         Greedy([<number>_seconds_, <number>_minutes, <number>_hours_]),
//         <number> Optional(:<number>) Optional(OneOf(am/pm))
//       ])
//     )
//     ])

// ])

const tree =

// Every day at 13 hours, 20 seconds

[ 
  [Every, _], 
  [day, 
    [
      [_, at, _], 
      [
        [13, _, hours],
        [20, _, seconds]
      ]
    ]
  ]
]

21.7.:
Question: How do I express an order of expressions in a parent expression,
But also map each expression value to a type

Expression {
  static data = 
  {
    url: Expression, 
    data: Expression,
  }

  assert() {
    return Word('maybe').then(WS).then()
  }
}



const ruleset = ManyOf([QueryExpression])

const QueryExpression = OneOf([
  DateTimeExpression,
  MentionExpression
  CommandExpression,
])

const DateTimeExpression =
  OneOf([Word('every'),Word('each)])
  .and(Whitespace())
  .and(OneOf([
    WeekDayExpression,
    IntervalAtExpression,
    NumberedIntervalAtExpression
  ]))

  ...

  => 
    ExpressionBuilder: (...args: any[]): ExpressionFunction
    ExpressionFunction: { 
      (_p: Parser): 
      and(expr: ExpressionFunction): ExpressionFunction

ExpressionFunction collects the children through `and`
and when executed, parses the given functions one by one,
fails if any one of them fails, and returns a parsed version of each childrens parsed return value


const DateTimeExpression = Expression.define(
  "DateTime",
  OneOf([Word('every'),Word('each)])
  .and(Whitespace())
  .and(OneOf([
    WeekDayAtExpression,
    IntervalAtExpression,
    NumberedIntervalAtExpression
  ]))
)


every Monday at 20:00 ...

"DateTime": {
  children: [
    {"Word": {
      text: 'every'
    }},
    {"WhiteSpace: {}}
    {"WeekDayAt: {
      
    }}
  ]
}


Okay new plan:

string(): Parser
number(): Parser
Parser.then(Parser): Parser

const jsonString = 
  string().many()
  .between(string('"'))

const jsonNumber = number({ many })

const jsonValue = oneOf([
  jsonString,
  jsonNumber
])

const jsonArray = 
  jsonValue
  .separatedBy(
    string(",")
  )
  .between(string("["), string("]"))

jsonArray.parse('[251,644,"text",525]')



